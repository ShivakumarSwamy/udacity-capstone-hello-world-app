version: 2.1

orbs:
  slack: circleci/slack@4.3.1
  docker: circleci/docker@1.5.0
  helm: circleci/helm@1.2.0
  kubernetes: circleci/kubernetes@0.12.0
  kubeval: kiddo3/kubevalorb@1.0.1

executors:
  cimg-openjdk-11:
    docker:
      - image: cimg/openjdk:11.0

commands:
  slack-notify-on-fail:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  slack-notify-on-pass:
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

  update-k8s-current-context:
    parameters:
      cluster_name:
        type: string
    steps:
      - run:
          name: Update current context to point to cluster << parameters.cluster_name >>
          command: |
            aws eks update-kubeconfig --name << parameters.cluster_name >>

  k8s-rollback-deployment-on-fail:
    parameters:
      deployment_name:
        type: string
      namespace:
        type: string
    steps:
      - run:
          when: on_fail
          name: Rollback deployment << parameters.deployment_name >> in namespace << parameters.namespace >>
          command: |
            kubectl rollout undo deployment/<< parameters.deployment_name >> --namespace=<< parameters.namespace >>
            kubectl rollout status deployment/<< parameters.deployment_name >> --namespace=<< parameters.namespace >> --watch=true

jobs:
  build-test-analyze:
    docker:
      - image: circleci/openjdk:11.0.8-jdk
    steps:
      - checkout
      - run: ./gradlew build test sonarqube
      - slack-notify-on-fail

  k8s-manifest-validation-dryrun:
    docker:
      - image: amazon/aws-cli:2.1.34
    steps:
      - run: yum -y install jq tar git openssl wget
      - update-k8s-current-context:
          cluster_name: "${CLUSTER_NAME}"
      - checkout
      - helm/install-helm-client:
          version: v3.5.3
      - kubeval/install-kubeval
      - run:
          command: |
            helm template . | kubeval
          working_directory: micro-service
      - kubernetes/install-kubectl
      - run:
          command: |
            helm template . | kubectl apply -f - --dry-run=client --namespace ${NAMESPACE}
          working_directory: micro-service
      - slack-notify-on-fail
    environment:
      CLUSTER_NAME: udacity-1
      NAMESPACE: udacity-services

  k8s-deploy-app:
    docker:
      - image: amazon/aws-cli:2.1.34
    steps:
      - run: yum -y install jq tar git openssl
      - update-k8s-current-context:
          cluster_name: "${CLUSTER_NAME}"
      - checkout
      - helm/install-helm-client:
          version: v3.5.3
      - kubernetes/install-kubectl
      - run:
          command: |
            helm template . --set app.tag="${CIRCLE_BRANCH:0:7}-${CIRCLE_SHA1:0:7}" | kubectl apply -f - --namespace ${NAMESPACE} --record
          working_directory: micro-service
      - run: kubectl rollout status deployment/${DEPLOYMENT_NAME} --namespace=${NAMESPACE} --watch=true
      - k8s-rollback-deployment-on-fail:
          deployment_name: "${DEPLOYMENT_NAME}"
          namespace: "${NAMESPACE}"
      - slack-notify-on-fail
    environment:
      CLUSTER_NAME: udacity-1
      NAMESPACE: udacity-services
      DEPLOYMENT_NAME: udacity-capstone-hello-world-app

  smoke-test:
    docker:
      - image: amazon/aws-cli:2.1.34
    steps:
      - run: yum -y install jq
      - update-k8s-current-context:
          cluster_name: "${CLUSTER_NAME}"
      - kubernetes/install-kubectl
      - run:
          name: backend health check
          command: |
            export HOSTNAME="$(kubectl get -n ${NAMESPACE} ingress ${INGRESS_NAME} -o json | jq -r ".status.loadBalancer.ingress[0].hostname")"
            curl --silent --fail http://${HOSTNAME}/actuator/health
      - k8s-rollback-deployment-on-fail:
          deployment_name: "${DEPLOYMENT_NAME}"
          namespace: "${NAMESPACE}"
      - slack-notify-on-fail
      - slack-notify-on-pass
    environment:
      CLUSTER_NAME: udacity-1
      NAMESPACE: udacity-services
      INGRESS_NAME: udacity-capstone-hello-world-app
      DEPLOYMENT_NAME: udacity-capstone-hello-world-app

workflows:
  app:
    jobs:
      - build-test-analyze:
          context:
            - sonar-secrets
            - slack-secrets
      - docker/hadolint:
          requires:
            - build-test-analyze
          post-steps:
            - slack-notify-on-fail
          context:
            - slack-secrets
      - docker/publish:
          requires:
            - docker/hadolint
          after_build:
            - slack-notify-on-fail
          after_checkout:
            - run: ./gradlew bootJar
          image: shivakumarswamy/udacity-capstone-hello-world-app
          executor: cimg-openjdk-11
          tag: "${CIRCLE_BRANCH:0:7}-${CIRCLE_SHA1:0:7}"
          use-remote-docker: true
          context:
            - docker-secrets
            - slack-secrets
      - k8s-manifest-validation-dryrun:
          requires:
            - docker/publish
          context:
            - aws-secrets
            - slack-secrets
      - slack/on-hold:
          filters:
            branches:
              only: main
          requires:
            - k8s-manifest-validation-dryrun
          context:
            - slack-secrets
      - pause_workflow:
          requires:
            - slack/on-hold
          type: approval
      - k8s-deploy-app:
          requires:
            - pause_workflow
          context:
            - aws-secrets
            - slack-secrets
      - smoke-test:
          requires:
            - k8s-deploy-app
          context:
            - aws-secrets
            - slack-secrets